{"version":3,"file":"vendors-node_modules_theia_terminal_lib_browser_terminal-preferences_js.js","mappings":"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","sources":["webpack:///../node_modules/@theia/terminal/src/browser/terminal-preferences.ts?","webpack:///../node_modules/@theia/terminal/src/browser/terminal-theme-service.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2018 Bitsler and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/* eslint-disable max-len */\n\nimport { interfaces } from '@theia/core/shared/inversify';\nimport { IJSONSchema } from '@theia/core/lib/common/json-schema';\nimport { createPreferenceProxy, PreferenceProxy, PreferenceService, PreferenceContribution, PreferenceSchema, PreferenceSchemaProperties } from '@theia/core/lib/browser';\nimport { nls } from '@theia/core/lib/common/nls';\nimport { editorGeneratedPreferenceProperties } from '@theia/editor/lib/browser/editor-generated-preference-schema';\nimport { OS } from '@theia/core';\nimport { terminalAnsiColorMap } from './terminal-theme-service';\n\nconst commonProfileProperties: PreferenceSchemaProperties = {\n    env: {\n        type: 'object',\n        additionalProperties: {\n            type: 'string'\n        },\n        markdownDescription: nls.localizeByDefault('An object with environment variables that will be added to the terminal profile process. Set to `null` to delete environment variables from the base environment.'),\n    },\n    overrideName: {\n        type: 'boolean',\n        description: nls.localizeByDefault('Whether or not to replace the dynamic terminal title that detects what program is running with the static profile name.')\n    },\n    icon: {\n        type: 'string',\n        markdownDescription: nls.localize('theia/terminal/profileIcon', 'A codicon ID to associate with the terminal icon.\\nterminal-tmux:\"$(terminal-tmux)\"')\n    },\n    color: {\n        type: 'string',\n        enum: Object.getOwnPropertyNames(terminalAnsiColorMap),\n        description: nls.localize('theia/terminal/profileColor', 'A terminal theme color ID to associate with the terminal.')\n    }\n};\n\nconst stringOrStringArray: IJSONSchema = {\n    oneOf: [\n        { type: 'string' },\n        {\n            type: 'array',\n            items: {\n                type: 'string'\n            }\n        }\n    ]\n};\n\nconst pathProperty: IJSONSchema = {\n    description: nls.localize('theia/terminal/profilePath', 'The path of the shell that this profile uses.'),\n    ...stringOrStringArray\n};\n\nfunction shellArgsDeprecatedMessage(type: OS.Type): string {\n    return nls.localize('theia/terminal/shell.deprecated', 'This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in \\'terminal.integrated.profiles.{0}\\' and setting its profile name as the default in \\'terminal.integrated.defaultProfile.{0}.\\'', type.toString().toLowerCase());\n}\n\nexport const TerminalConfigSchema: PreferenceSchema = {\n    type: 'object',\n    properties: {\n        'terminal.enableCopy': {\n            type: 'boolean',\n            description: nls.localize('theia/terminal/enableCopy', 'Enable ctrl-c (cmd-c on macOS) to copy selected text'),\n            default: true\n        },\n        'terminal.enablePaste': {\n            type: 'boolean',\n            description: nls.localize('theia/terminal/enablePaste', 'Enable ctrl-v (cmd-v on macOS) to paste from clipboard'),\n            default: true\n        },\n        'terminal.integrated.fontFamily': {\n            type: 'string',\n            markdownDescription: nls.localizeByDefault('Controls the font family of the terminal. Defaults to {0}\\'s value.', '`#editor.fontFamily#`'),\n            default: editorGeneratedPreferenceProperties['editor.fontFamily'].default,\n        },\n        'terminal.integrated.fontSize': {\n            type: 'number',\n            description: nls.localizeByDefault('Controls the font size in pixels of the terminal.'),\n            minimum: 6,\n            default: editorGeneratedPreferenceProperties['editor.fontSize'].default\n        },\n        'terminal.integrated.fontWeight': {\n            type: 'string',\n            enum: ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'],\n            description: nls.localizeByDefault('The font weight to use within the terminal for non-bold text. Accepts \\\"normal\\\" and \\\"bold\\\" keywords or numbers between 1 and 1000.'),\n            default: 'normal'\n        },\n        'terminal.integrated.fontWeightBold': {\n            type: 'string',\n            enum: ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'],\n            description: nls.localizeByDefault('The font weight to use within the terminal for bold text. Accepts \\\"normal\\\" and \\\"bold\\\" keywords or numbers between 1 and 1000.'),\n            default: 'bold'\n        },\n        'terminal.integrated.drawBoldTextInBrightColors': {\n            description: nls.localizeByDefault('Controls whether bold text in the terminal will always use the \\\"bright\\\" ANSI color variant.'),\n            type: 'boolean',\n            default: true,\n        },\n        'terminal.integrated.letterSpacing': {\n            description: nls.localizeByDefault('Controls the letter spacing of the terminal. This is an integer value which represents the number of additional pixels to add between characters.'),\n            type: 'number',\n            default: 1\n        },\n        'terminal.integrated.lineHeight': {\n            description: nls.localizeByDefault('Controls the line height of the terminal. This number is multiplied by the terminal font size to get the actual line-height in pixels.'),\n            type: 'number',\n            minimum: 1,\n            default: 1\n        },\n        'terminal.integrated.scrollback': {\n            description: nls.localizeByDefault('Controls the maximum number of lines the terminal keeps in its buffer. We pre-allocate memory based on this value in order to ensure a smooth experience. As such, as the value increases, so will the amount of memory.'),\n            type: 'number',\n            default: 1000\n        },\n        'terminal.integrated.fastScrollSensitivity': {\n            markdownDescription: nls.localizeByDefault('Scrolling speed multiplier when pressing `Alt`.'),\n            type: 'number',\n            default: 5,\n        },\n        'terminal.integrated.rendererType': {\n            description: nls.localize('theia/terminal/rendererType', 'Controls how the terminal is rendered.'),\n            type: 'string',\n            enum: ['canvas', 'dom'],\n            default: 'canvas',\n            deprecationMessage: nls.localize('theia/terminal/rendererTypeDeprecationMessage', 'The renderer type is no longer supported as an option.')\n        },\n        'terminal.integrated.copyOnSelection': {\n            description: nls.localizeByDefault('Controls whether text selected in the terminal will be copied to the clipboard.'),\n            type: 'boolean',\n            default: false,\n        },\n        'terminal.integrated.cursorBlinking': {\n            description: nls.localizeByDefault('Controls whether the terminal cursor blinks.'),\n            type: 'boolean',\n            default: false\n        },\n        'terminal.integrated.cursorStyle': {\n            description: nls.localizeByDefault('Controls the style of terminal cursor when the terminal is focused.'),\n            enum: ['block', 'underline', 'line'],\n            default: 'block'\n        },\n        'terminal.integrated.cursorWidth': {\n            markdownDescription: nls.localizeByDefault('Controls the width of the cursor when {0} is set to {1}.', '`#terminal.integrated.cursorStyle#`', '`line`'),\n            type: 'number',\n            default: 1\n        },\n        'terminal.integrated.shell.windows': {\n            type: ['string', 'null'],\n            typeDetails: { isFilepath: true },\n            markdownDescription: nls.localize('theia/terminal/shellWindows', 'The path of the shell that the terminal uses on Windows. (default: \\'{0}\\').', 'C:\\\\Windows\\\\System32\\\\cmd.exe'),\n            default: undefined,\n            deprecationMessage: shellArgsDeprecatedMessage(OS.Type.Windows),\n        },\n        'terminal.integrated.shell.osx': {\n            type: ['string', 'null'],\n            markdownDescription: nls.localize('theia/terminal/shellOsx', 'The path of the shell that the terminal uses on macOS (default: \\'{0}\\'}).', '/bin/bash'),\n            default: undefined,\n            deprecationMessage: shellArgsDeprecatedMessage(OS.Type.OSX),\n        },\n        'terminal.integrated.shell.linux': {\n            type: ['string', 'null'],\n            markdownDescription: nls.localize('theia/terminal/shellLinux', 'The path of the shell that the terminal uses on Linux (default: \\'{0}\\'}).', '/bin/bash'),\n            default: undefined,\n            deprecationMessage: shellArgsDeprecatedMessage(OS.Type.Linux),\n        },\n        'terminal.integrated.shellArgs.windows': {\n            type: 'array',\n            markdownDescription: nls.localize('theia/terminal/shellArgsWindows', 'The command line arguments to use when on the Windows terminal.'),\n            default: [],\n            deprecationMessage: shellArgsDeprecatedMessage(OS.Type.Windows),\n        },\n        'terminal.integrated.shellArgs.osx': {\n            type: 'array',\n            markdownDescription: nls.localize('theia/terminal/shellArgsOsx', 'The command line arguments to use when on the macOS terminal.'),\n            default: [\n                '-l'\n            ],\n            deprecationMessage: shellArgsDeprecatedMessage(OS.Type.OSX),\n        },\n        'terminal.integrated.shellArgs.linux': {\n            type: 'array',\n            markdownDescription: nls.localize('theia/terminal/shellArgsLinux', 'The command line arguments to use when on the Linux terminal.'),\n            default: [],\n            deprecationMessage: shellArgsDeprecatedMessage(OS.Type.Linux),\n        },\n        'terminal.integrated.confirmOnExit': {\n            type: 'string',\n            description: nls.localizeByDefault('Controls whether to confirm when the window closes if there are active terminal sessions.'),\n            enum: ['never', 'always', 'hasChildProcesses'],\n            enumDescriptions: [\n                nls.localizeByDefault('Never confirm.'),\n                nls.localizeByDefault('Always confirm if there are terminals.'),\n                nls.localizeByDefault('Confirm if there are any terminals that have child processes.'),\n            ],\n            default: 'never'\n        },\n        'terminal.integrated.enablePersistentSessions': {\n            type: 'boolean',\n            description: nls.localizeByDefault('Persist terminal sessions/history for the workspace across window reloads.'),\n            default: true\n        },\n        'terminal.integrated.defaultProfile.windows': {\n            type: 'string',\n            description: nls.localize('theia/terminal/defaultProfile', 'The default profile used on {0}', OS.Type.Windows.toString())\n\n        },\n        'terminal.integrated.defaultProfile.linux': {\n            type: 'string',\n            description: nls.localize('theia/terminal/defaultProfile', 'The default profile used on {0}', OS.Type.Linux.toString())\n\n        },\n        'terminal.integrated.defaultProfile.osx': {\n            type: 'string',\n            description: nls.localize('theia/terminal/defaultProfile', 'The default profile used on {0}', OS.Type.OSX.toString())\n        },\n        'terminal.integrated.profiles.windows': {\n            markdownDescription: nls.localize('theia/terminal/profiles', 'The profiles to present when creating a new terminal. Set the path property manually with optional args.\\nSet an existing profile to `null` to hide the profile from the list, for example: `\"{0}\": null`.', 'cmd'),\n            anyOf: [\n                {\n                    type: 'object',\n                    properties: {\n                    },\n                    additionalProperties: {\n                        oneOf: [{\n                            type: 'object',\n                            additionalProperties: false,\n                            properties: {\n                                path: pathProperty,\n                                args: {\n                                    ...stringOrStringArray,\n                                    description: nls.localize('theia/terminal/profileArgs', 'The shell arguments that this profile uses.'),\n\n                                },\n                                ...commonProfileProperties\n                            },\n                            required: ['path']\n                        },\n                        {\n                            type: 'object',\n                            additionalProperties: false,\n                            properties: {\n                                source: {\n                                    type: 'string',\n                                    description: nls.localizeByDefault('A profile source that will auto detect the paths to the shell. Note that non-standard executable locations are not supported and must be created manually in a new profile.')\n                                },\n                                args: {\n                                    ...stringOrStringArray,\n                                    description: nls.localize('theia/terminal/profileArgs', 'The shell arguments that this profile uses.'),\n\n                                },\n                                ...commonProfileProperties\n                            },\n                            required: ['source'],\n                            default: {\n                                path: 'C:\\\\Windows\\\\System32\\\\cmd.exe'\n                            }\n\n                        }, {\n                            type: 'null'\n                        }]\n                    },\n                    default: {\n                        cmd: {\n                            path: 'C:\\\\Windows\\\\System32\\\\cmd.exe'\n                        }\n                    }\n                },\n                { type: 'null' }\n            ]\n        },\n        'terminal.integrated.profiles.linux': {\n            markdownDescription: nls.localize('theia/terminal/profiles', 'The profiles to present when creating a new terminal. Set the path property manually with optional args.\\nSet an existing profile to `null` to hide the profile from the list, for example: `\"{0}\": null`.', 'bash'),\n            anyOf: [{\n                type: 'object',\n                properties: {\n                },\n                additionalProperties: {\n                    oneOf: [\n                        {\n                            type: 'object',\n                            properties: {\n                                path: pathProperty,\n                                args: {\n                                    type: 'array',\n                                    items: { type: 'string' },\n                                    description: nls.localize('theia/terminal/profileArgs', 'The shell arguments that this profile uses.'),\n                                },\n                                ...commonProfileProperties\n                            },\n                            required: ['path'],\n                            additionalProperties: false,\n                        },\n                        { type: 'null' }\n                    ]\n                },\n                default: {\n                    path: '${env:SHELL}',\n                    args: ['-l']\n                }\n\n            },\n            { type: 'null' }\n            ]\n        },\n        'terminal.integrated.profiles.osx': {\n            markdownDescription: nls.localize('theia/terminal/profiles', 'The profiles to present when creating a new terminal. Set the path property manually with optional args.\\nSet an existing profile to `null` to hide the profile from the list, for example: `\"{0}\": null`.', 'zsh'),\n            anyOf: [{\n                type: 'object',\n                properties: {\n                },\n                additionalProperties: {\n                    oneOf: [\n                        {\n                            type: 'object',\n                            properties: {\n                                path: pathProperty,\n                                args: {\n                                    type: 'array',\n                                    items: { type: 'string' },\n                                    description: nls.localize('theia/terminal/profileArgs', 'The shell arguments that this profile uses.'),\n                                },\n                                ...commonProfileProperties\n                            },\n                            required: ['path'],\n                            additionalProperties: false,\n                        },\n                        { type: 'null' }\n                    ]\n                },\n                default: {\n                    path: '${env:SHELL}',\n                    args: ['-l']\n                }\n\n            },\n            { type: 'null' }\n            ]\n        },\n    }\n};\n\nexport type Profiles = null | {\n    [key: string]: {\n        path?: string | string[],\n        source?: string,\n        args?: string | string[],\n        env?: { [key: string]: string },\n        overrideName?: boolean;\n        icon?: string,\n        color?: string\n    }\n};\n\nexport interface TerminalConfiguration {\n    'terminal.enableCopy': boolean\n    'terminal.enablePaste': boolean\n    // xterm compatible, see https://xtermjs.org/docs/api/terminal/interfaces/iterminaloptions/\n    'terminal.integrated.fontFamily': string\n    'terminal.integrated.fontSize': number\n    'terminal.integrated.fontWeight': FontWeight\n    'terminal.integrated.fontWeightBold': FontWeight,\n    'terminal.integrated.drawBoldTextInBrightColors': boolean,\n    'terminal.integrated.letterSpacing': number\n    'terminal.integrated.lineHeight': number,\n    'terminal.integrated.scrollback': number,\n    'terminal.integrated.fastScrollSensitivity': number,\n    'terminal.integrated.rendererType': TerminalRendererType,\n    'terminal.integrated.copyOnSelection': boolean,\n    'terminal.integrated.cursorBlinking': boolean,\n    'terminal.integrated.cursorStyle': CursorStyleVSCode,\n    'terminal.integrated.cursorWidth': number,\n    'terminal.integrated.shell.windows': string | null | undefined,\n    'terminal.integrated.shell.osx': string | null | undefined,\n    'terminal.integrated.shell.linux': string | null | undefined,\n    'terminal.integrated.shellArgs.windows': string[],\n    'terminal.integrated.shellArgs.osx': string[],\n    'terminal.integrated.shellArgs.linux': string[],\n    'terminal.integrated.defaultProfile.windows': string,\n    'terminal.integrated.defaultProfile.linux': string,\n    'terminal.integrated.defaultProfile.osx': string,\n    'terminal.integrated.profiles.windows': Profiles\n    'terminal.integrated.profiles.linux': Profiles,\n    'terminal.integrated.profiles.osx': Profiles,\n    'terminal.integrated.confirmOnExit': ConfirmOnExitType\n    'terminal.integrated.enablePersistentSessions': boolean\n}\n\ntype FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\nexport type CursorStyle = 'block' | 'underline' | 'bar';\n// VS Code uses 'line' to represent 'bar'. The following conversion is necessary to support their preferences.\nexport type CursorStyleVSCode = CursorStyle | 'line';\nexport type TerminalRendererType = 'canvas' | 'dom';\nexport type ConfirmOnExitType = 'never' | 'always' | 'hasChildProcesses';\nexport const DEFAULT_TERMINAL_RENDERER_TYPE = 'canvas';\nexport function isTerminalRendererType(arg: unknown): arg is TerminalRendererType {\n    return typeof arg === 'string' && (arg === 'canvas' || arg === 'dom');\n}\n\nexport const TerminalPreferenceContribution = Symbol('TerminalPreferenceContribution');\nexport const TerminalPreferences = Symbol('TerminalPreferences');\nexport type TerminalPreferences = PreferenceProxy<TerminalConfiguration>;\n\nexport function createTerminalPreferences(preferences: PreferenceService, schema: PreferenceSchema = TerminalConfigSchema): TerminalPreferences {\n    return createPreferenceProxy(preferences, schema);\n}\n\nexport function bindTerminalPreferences(bind: interfaces.Bind): void {\n    bind(TerminalPreferences).toDynamicValue(ctx => {\n        const preferences = ctx.container.get<PreferenceService>(PreferenceService);\n        const contribution = ctx.container.get<PreferenceContribution>(TerminalPreferenceContribution);\n        return createTerminalPreferences(preferences, contribution.schema);\n    }).inSingletonScope();\n    bind(TerminalPreferenceContribution).toConstantValue({ schema: TerminalConfigSchema });\n    bind(PreferenceContribution).toService(TerminalPreferenceContribution);\n}\n","// *****************************************************************************\n// Copyright (C) 2019 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { ITheme } from 'xterm';\nimport { injectable, inject } from '@theia/core/shared/inversify';\nimport { ColorRegistry } from '@theia/core/lib/browser/color-registry';\nimport { ColorDefaults } from '@theia/core/lib/common/color';\nimport { ThemeService } from '@theia/core/lib/browser/theming';\nimport { ThemeChangeEvent } from '@theia/core/lib/common/theme';\nimport { Event } from '@theia/core';\n\n/**\n * It should be aligned with https://github.com/microsoft/vscode/blob/0dfa355b3ad185a6289ba28a99c141ab9e72d2be/src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts#L40\n */\nexport const terminalAnsiColorMap: { [key: string]: { index: number, defaults: ColorDefaults } } = {\n    'terminal.ansiBlack': {\n        index: 0,\n        defaults: {\n            light: '#000000',\n            dark: '#000000',\n            hcDark: '#000000',\n            hcLight: '#292929'\n        }\n    },\n    'terminal.ansiRed': {\n        index: 1,\n        defaults: {\n            light: '#cd3131',\n            dark: '#cd3131',\n            hcDark: '#cd0000',\n            hcLight: '#cd3131'\n        }\n    },\n    'terminal.ansiGreen': {\n        index: 2,\n        defaults: {\n            light: '#00BC00',\n            dark: '#0DBC79',\n            hcDark: '#00cd00',\n            hcLight: '#00bc00'\n        }\n    },\n    'terminal.ansiYellow': {\n        index: 3,\n        defaults: {\n            light: '#949800',\n            dark: '#e5e510',\n            hcDark: '#cdcd00',\n            hcLight: '#949800'\n        }\n    },\n    'terminal.ansiBlue': {\n        index: 4,\n        defaults: {\n            light: '#0451a5',\n            dark: '#2472c8',\n            hcDark: '#0000ee',\n            hcLight: '#0451a5'\n        }\n    },\n    'terminal.ansiMagenta': {\n        index: 5,\n        defaults: {\n            light: '#bc05bc',\n            dark: '#bc3fbc',\n            hcDark: '#cd00cd',\n            hcLight: '#bc05bc'\n        }\n    },\n    'terminal.ansiCyan': {\n        index: 6,\n        defaults: {\n            light: '#0598bc',\n            dark: '#11a8cd',\n            hcDark: '#00cdcd',\n            hcLight: '#0598b'\n        }\n    },\n    'terminal.ansiWhite': {\n        index: 7,\n        defaults: {\n            light: '#555555',\n            dark: '#e5e5e5',\n            hcDark: '#e5e5e5',\n            hcLight: '#555555'\n        }\n    },\n    'terminal.ansiBrightBlack': {\n        index: 8,\n        defaults: {\n            light: '#666666',\n            dark: '#666666',\n            hcDark: '#7f7f7f',\n            hcLight: '#666666'\n        }\n    },\n    'terminal.ansiBrightRed': {\n        index: 9,\n        defaults: {\n            light: '#cd3131',\n            dark: '#f14c4c',\n            hcDark: '#ff0000',\n            hcLight: '#cd3131'\n        }\n    },\n    'terminal.ansiBrightGreen': {\n        index: 10,\n        defaults: {\n            light: '#14CE14',\n            dark: '#23d18b',\n            hcDark: '#00ff00',\n            hcLight: '#00bc00'\n        }\n    },\n    'terminal.ansiBrightYellow': {\n        index: 11,\n        defaults: {\n            light: '#b5ba00',\n            dark: '#f5f543',\n            hcDark: '#ffff00',\n            hcLight: '#b5ba00'\n        }\n    },\n    'terminal.ansiBrightBlue': {\n        index: 12,\n        defaults: {\n            light: '#0451a5',\n            dark: '#3b8eea',\n            hcDark: '#5c5cff',\n            hcLight: '#0451a5'\n        }\n    },\n    'terminal.ansiBrightMagenta': {\n        index: 13,\n        defaults: {\n            light: '#bc05bc',\n            dark: '#d670d6',\n            hcDark: '#ff00ff',\n            hcLight: '#bc05bc'\n        }\n    },\n    'terminal.ansiBrightCyan': {\n        index: 14,\n        defaults: {\n            light: '#0598bc',\n            dark: '#29b8db',\n            hcDark: '#00ffff',\n            hcLight: '#0598bc'\n        }\n    },\n    'terminal.ansiBrightWhite': {\n        index: 15,\n        defaults: {\n            light: '#a5a5a5',\n            dark: '#e5e5e5',\n            hcDark: '#ffffff',\n            hcLight: '#a5a5a5'\n        }\n    }\n};\n\n@injectable()\nexport class TerminalThemeService {\n\n    @inject(ColorRegistry) protected readonly colorRegistry: ColorRegistry;\n    @inject(ThemeService) protected readonly themeService: ThemeService;\n\n    get onDidChange(): Event<ThemeChangeEvent> {\n        return this.themeService.onDidColorThemeChange;\n    }\n\n    get theme(): ITheme {\n        const foregroundColor = this.colorRegistry.getCurrentColor('terminal.foreground');\n        const backgroundColor = this.colorRegistry.getCurrentColor('terminal.background') || this.colorRegistry.getCurrentColor('panel.background');\n        const cursorColor = this.colorRegistry.getCurrentColor('terminalCursor.foreground') || foregroundColor;\n        const cursorAccentColor = this.colorRegistry.getCurrentColor('terminalCursor.background') || backgroundColor;\n        const selectionBackgroundColor = this.colorRegistry.getCurrentColor('terminal.selectionBackground');\n        const selectionInactiveBackground = this.colorRegistry.getCurrentColor('terminal.inactiveSelectionBackground');\n        const selectionForegroundColor = this.colorRegistry.getCurrentColor('terminal.selectionForeground');\n\n        const theme: ITheme = {\n            background: backgroundColor,\n            foreground: foregroundColor,\n            cursor: cursorColor,\n            cursorAccent: cursorAccentColor,\n            selectionBackground: selectionBackgroundColor,\n            selectionInactiveBackground: selectionInactiveBackground,\n            selectionForeground: selectionForegroundColor\n        };\n        // eslint-disable-next-line guard-for-in\n        for (const id in terminalAnsiColorMap) {\n            const colorId = id.substring(13);\n            const colorName = colorId.charAt(0).toLowerCase() + colorId.slice(1);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (theme as any)[colorName] = this.colorRegistry.getCurrentColor(id);\n        }\n        return theme;\n    }\n\n}\n"],"names":[],"sourceRoot":""}