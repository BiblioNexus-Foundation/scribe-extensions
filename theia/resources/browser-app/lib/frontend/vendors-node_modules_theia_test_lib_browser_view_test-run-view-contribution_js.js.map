{"version":3,"file":"vendors-node_modules_theia_test_lib_browser_view_test-run-view-contribution_js.js","mappings":"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","sources":["webpack:///../node_modules/@theia/test/src/browser/test-service.ts?","webpack:///../node_modules/@theia/test/src/browser/view/test-context-key-service.ts?","webpack:///../node_modules/@theia/test/src/browser/view/test-execution-state-manager.ts?","webpack:///../node_modules/@theia/test/src/browser/view/test-output-ui-model.ts?","webpack:///../node_modules/@theia/test/src/browser/view/test-run-view-contribution.ts?","webpack:///../node_modules/@theia/test/src/browser/view/test-run-widget.tsx?","webpack:///../node_modules/@theia/test/src/browser/view/test-tree-widget.tsx?","webpack:///../node_modules/@theia/test/src/browser/view/test-view-contribution.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2022 STMicroelectronics and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { CancellationToken, ContributionProvider, Disposable, Emitter, Event, QuickPickService, isObject, nls } from '@theia/core/lib/common';\nimport { CancellationTokenSource, Location, Range } from '@theia/core/shared/vscode-languageserver-protocol';\nimport { CollectionDelta, TreeDelta } from '../common/tree-delta';\nimport { MarkdownString } from '@theia/core/lib/common/markdown-rendering';\nimport URI from '@theia/core/lib/common/uri';\nimport { inject, injectable, named, postConstruct } from '@theia/core/shared/inversify';\nimport { groupBy } from '../common/collections';\nimport { codiconArray } from '@theia/core/lib/browser';\n\nexport enum TestRunProfileKind {\n    Run = 1,\n    Debug = 2,\n    Coverage = 3\n}\n\nexport interface TestRunProfile {\n    readonly kind: TestRunProfileKind;\n    readonly label: string,\n    isDefault: boolean;\n    readonly canConfigure: boolean;\n    readonly tag: string;\n    run(name: string, included: readonly TestItem[], excluded: readonly TestItem[], preserveFocus: boolean): void;\n    configure(): void;\n}\n\nexport interface TestOutputItem {\n    readonly output: string;\n    readonly location?: Location;\n}\n\nexport enum TestExecutionState {\n    Queued = 1,\n    Running = 2,\n    Passed = 3,\n    Failed = 4,\n    Skipped = 5,\n    Errored = 6\n}\n\nexport interface TestMessage {\n    readonly expected?: string;\n    readonly actual?: string;\n    readonly location: Location;\n    readonly message: string | MarkdownString;\n    readonly contextValue?: string;\n}\n\nexport namespace TestMessage {\n    export function is(obj: unknown): obj is TestMessage {\n        return isObject<TestMessage>(obj) && (MarkdownString.is(obj.message) || typeof obj.message === 'string');\n    }\n}\n\nexport interface TestState {\n    readonly state: TestExecutionState;\n}\n\nexport interface TestFailure extends TestState {\n    readonly state: TestExecutionState.Failed | TestExecutionState.Errored;\n    readonly messages: TestMessage[];\n    readonly duration?: number;\n}\n\nexport namespace TestFailure {\n    export function is(obj: unknown): obj is TestFailure {\n        return isObject<TestFailure>(obj) && (obj.state === TestExecutionState.Failed || obj.state === TestExecutionState.Errored) && Array.isArray(obj.messages);\n    }\n}\n\nexport interface TestSuccess extends TestState {\n    readonly state: TestExecutionState.Passed;\n    readonly duration?: number;\n}\n\nexport interface TestStateChangedEvent {\n    test: TestItem;\n    oldState: TestState | undefined;\n    newState: TestState | undefined;\n}\n\nexport interface TestRun {\n    cancel(): void;\n    readonly name: string;\n    readonly isRunning: boolean;\n    readonly controller: TestController;\n\n    onDidChangeProperty: Event<{ name?: string, isRunning?: boolean }>;\n\n    getTestState(item: TestItem): TestState | undefined;\n    onDidChangeTestState: Event<TestStateChangedEvent[]>;\n\n    getOutput(item?: TestItem): readonly TestOutputItem[];\n    onDidChangeTestOutput: Event<[TestItem | undefined, TestOutputItem][]>;\n\n    readonly items: readonly TestItem[];\n}\n\nexport namespace TestRun {\n    export function is(obj: unknown): obj is TestRun {\n        return isObject<TestRun>(obj)\n            && typeof obj.cancel === 'function'\n            && typeof obj.name === 'string'\n            && typeof obj.isRunning === 'boolean'\n            && typeof obj.controller === 'object'\n            && typeof obj.onDidChangeProperty === 'function'\n            && typeof obj.getTestState === 'function'\n            && typeof obj.onDidChangeTestState === 'function'\n            && typeof obj.onDidChangeTestState === 'function'\n            && typeof obj.getOutput === 'function'\n            && typeof obj.onDidChangeTestOutput === 'function'\n            && Array.isArray(obj.items);\n    }\n}\n\nexport interface TestItem {\n    readonly id: string;\n    readonly label: string;\n    readonly range?: Range;\n    readonly sortKey?: string;\n    readonly tags: string[];\n    readonly uri?: URI;\n    readonly busy: boolean;\n    readonly tests: readonly TestItem[];\n    readonly description?: string;\n    readonly error?: string | MarkdownString;\n    readonly parent: TestItem | undefined;\n    readonly controller: TestController | undefined;\n    readonly canResolveChildren: boolean;\n    resolveChildren(): void;\n    readonly path: string[];\n}\n\nexport namespace TestItem {\n    export function is(obj: unknown): obj is TestItem {\n        return isObject<TestItem>(obj)\n            && obj.id !== undefined\n            && obj.label !== undefined\n            && Array.isArray(obj.tags)\n            && Array.isArray(obj.tests)\n            && obj.busy !== undefined\n            && obj.canResolveChildren !== undefined\n            && typeof obj.resolveChildren === 'function';\n    }\n}\n\nexport interface TestController {\n    readonly id: string;\n    readonly label: string;\n    readonly tests: readonly TestItem[];\n    readonly testRunProfiles: readonly TestRunProfile[];\n    readonly testRuns: readonly TestRun[];\n\n    readonly onItemsChanged: Event<TreeDelta<string, TestItem>[]>;\n    readonly onRunsChanged: Event<CollectionDelta<TestRun, TestRun>>;\n    readonly onProfilesChanged: Event<CollectionDelta<TestRunProfile, TestRunProfile>>;\n\n    refreshTests(token: CancellationToken): Promise<void>;\n    clearRuns(): void;\n}\n\nexport interface TestService {\n    clearResults(): void;\n    configureProfile(): void;\n    selectDefaultProfile(): void;\n    runTestsWithProfile(tests: TestItem[]): void;\n    runTests(profileKind: TestRunProfileKind, tests: TestItem[]): void;\n    runAllTests(profileKind: TestRunProfileKind): void;\n    getControllers(): TestController[];\n    registerTestController(controller: TestController): Disposable;\n    onControllersChanged: Event<CollectionDelta<string, TestController>>;\n\n    refresh(): void;\n    cancelRefresh(): void;\n    isRefreshing: boolean;\n    onDidChangeIsRefreshing: Event<void>;\n}\n\nexport const TestContribution = Symbol('TestContribution');\n\nexport interface TestContribution {\n    registerTestControllers(service: TestService): void;\n}\n\nexport const TestService = Symbol('TestService');\n\n@injectable()\nexport class DefaultTestService implements TestService {\n    @inject(QuickPickService) quickpickService: QuickPickService;\n\n    private testRunCounter = 0;\n\n    private onDidChangeIsRefreshingEmitter = new Emitter<void>();\n    onDidChangeIsRefreshing: Event<void> = this.onDidChangeIsRefreshingEmitter.event;\n\n    private controllers: Map<string, TestController> = new Map();\n    private refreshing: Set<CancellationTokenSource> = new Set();\n    private onControllersChangedEmitter = new Emitter<CollectionDelta<string, TestController>>();\n\n    @inject(ContributionProvider) @named(TestContribution)\n    protected readonly contributionProvider: ContributionProvider<TestContribution>;\n\n    @postConstruct()\n    protected registerContributions(): void {\n        this.contributionProvider.getContributions().forEach(contribution => contribution.registerTestControllers(this));\n    }\n\n    onControllersChanged: Event<CollectionDelta<string, TestController>> = this.onControllersChangedEmitter.event;\n\n    registerTestController(controller: TestController): Disposable {\n        if (this.controllers.has(controller.id)) {\n            throw new Error('TestController already registered: ' + controller.id);\n        }\n        this.controllers.set(controller.id, controller);\n        this.onControllersChangedEmitter.fire({ added: [controller] });\n        return Disposable.create(() => {\n            this.controllers.delete(controller.id);\n            this.onControllersChangedEmitter.fire({ removed: [controller.id] });\n        });\n    }\n\n    getControllers(): TestController[] {\n        return Array.from(this.controllers.values());\n    }\n\n    refresh(): void {\n        const cts = new CancellationTokenSource();\n        this.refreshing.add(cts);\n\n        Promise.all(this.getControllers().map(controller => controller.refreshTests(cts.token))).then(() => {\n            this.refreshing.delete(cts);\n            if (this.refreshing.size === 0) {\n                this.onDidChangeIsRefreshingEmitter.fire();\n            }\n        });\n\n        if (this.refreshing.size === 1) {\n            this.onDidChangeIsRefreshingEmitter.fire();\n        }\n    }\n\n    cancelRefresh(): void {\n        if (this.refreshing.size > 0) {\n            this.refreshing.forEach(cts => cts.cancel());\n            this.refreshing.clear();\n            this.onDidChangeIsRefreshingEmitter.fire();\n        }\n    }\n\n    get isRefreshing(): boolean {\n        return this.refreshing.size > 0;\n    }\n\n    runAllTests(profileKind: TestRunProfileKind): void {\n        this.getControllers().forEach(controller => {\n            this.runTestForController(controller, profileKind, controller.tests);\n        });\n    }\n\n    protected async runTestForController(controller: TestController, profileKind: TestRunProfileKind, items: readonly TestItem[]): Promise<void> {\n        const runProfiles = controller.testRunProfiles.filter(profile => profile.kind === profileKind);\n        let activeProfile;\n        if (runProfiles.length === 1) {\n            activeProfile = runProfiles[0];\n        } else if (runProfiles.length > 1) {\n            const defaultProfile = runProfiles.find(p => p.isDefault);\n            if (defaultProfile) {\n                activeProfile = defaultProfile;\n            } else {\n\n                activeProfile = await this.pickProfile(runProfiles, nls.localizeByDefault('Pick a test profile to use'));\n            }\n        }\n        if (activeProfile) {\n            activeProfile.run(`Test run #${this.testRunCounter++}`, items, [], true);\n        }\n    }\n\n    protected async pickProfile(runProfiles: readonly TestRunProfile[], title: string): Promise<TestRunProfile | undefined> {\n        if (runProfiles.length === 0) {\n            return undefined;\n        }\n        // eslint-disable-next-line arrow-body-style\n        const picks = runProfiles.map(profile => {\n            let iconClasses;\n            if (profile.kind === TestRunProfileKind.Run) {\n                iconClasses = codiconArray('run');\n            } else if (profile.kind === TestRunProfileKind.Debug) {\n                iconClasses = codiconArray('debug-alt');\n            }\n            return {\n                iconClasses,\n                label: `${profile.label}${profile.isDefault ? ' (default)' : ''}`,\n                profile: profile\n            };\n        });\n\n        return (await this.quickpickService.show(picks, { title: title }))?.profile;\n\n    }\n\n    protected async pickProfileKind(): Promise<TestRunProfileKind | undefined> {\n        // eslint-disable-next-line arrow-body-style\n        const picks = [{\n            iconClasses: codiconArray('run'),\n            label: 'Run',\n            kind: TestRunProfileKind.Run\n        }, {\n            iconClasses: codiconArray('debug-alt'),\n            label: 'Debug',\n            kind: TestRunProfileKind.Debug\n        }];\n\n        return (await this.quickpickService.show(picks, { title: 'Select the kind of profiles' }))?.kind;\n\n    }\n\n    runTests(profileKind: TestRunProfileKind, items: TestItem[]): void {\n        groupBy(items, item => item.controller).forEach((tests, controller) => {\n            if (controller) {\n                this.runTestForController(controller, profileKind, tests);\n            }\n        });\n    }\n\n    runTestsWithProfile(items: TestItem[]): void {\n        groupBy(items, item => item.controller).forEach((tests, controller) => {\n            if (controller) {\n                this.pickProfile(controller.testRunProfiles, nls.localizeByDefault('Pick a test profile to use')).then(activeProfile => {\n                    if (activeProfile) {\n                        activeProfile.run(`Test run #${this.testRunCounter++}`, items, [], true);\n                    }\n                });\n            }\n        });\n    }\n\n    selectDefaultProfile(): void {\n        this.pickProfileKind().then(kind => {\n           const profiles = this.getControllers().flatMap(c => c.testRunProfiles).filter(profile => profile.kind === kind);\n            this.pickProfile(profiles, nls.localizeByDefault('Pick a test profile to use')).then(activeProfile => {\n                if (activeProfile) {\n                    // only change the default for the controller containing selected profile for default and its profiles with same kind\n                    const controller = this.getControllers().find(c => c.testRunProfiles.includes(activeProfile));\n                    controller?.testRunProfiles.filter(profile => profile.kind === activeProfile.kind).forEach(profile => {\n                        profile.isDefault = profile === activeProfile;\n                    });\n                }\n            });\n        });\n    }\n\n    configureProfile(): void {\n        const profiles: TestRunProfile[] = [];\n\n        for (const controller of this.controllers.values()) {\n            profiles.push(...controller.testRunProfiles);\n        }\n        ;\n        this.pickProfile(profiles.filter(profile => profile.canConfigure), nls.localizeByDefault('Select a profile to update')).then(profile => {\n            if (profile) {\n                profile.configure();\n            }\n        });\n    }\n\n    clearResults(): void {\n        for (const controller of this.controllers.values()) {\n            controller.clearRuns();\n        }\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2023 STMicroelectronics and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport { ContextKeyService, ContextKey } from '@theia/core/lib/browser/context-key-service';\n\n@injectable()\nexport class TestContextKeyService {\n\n    @inject(ContextKeyService)\n    protected readonly contextKeyService: ContextKeyService;\n\n    protected _contextValue: ContextKey<string | undefined>;\n    get contextValue(): ContextKey<string | undefined> {\n        return this._contextValue;\n    }\n\n    @postConstruct()\n    protected init(): void {\n        this._contextValue = this.contextKeyService.createKey<string | undefined>('testMessage', undefined);\n    }\n\n}\n","// *****************************************************************************\n// Copyright (C) 2023 STMicroelectronics and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject, injectable, postConstruct } from '@theia/core/shared/inversify';\nimport { TestController, TestExecutionState, TestItem, TestRun, TestService } from '../test-service';\n\n/**\n * This class manages the state of \"internal\" nodes in the test tree\n */\n@injectable()\nexport class TestExecutionStateManager {\n    @inject(TestService)\n    protected readonly testService: TestService;\n\n    private executionStates = new Map<TestRun, TestExecutionStateMap>();\n\n    @postConstruct()\n    init(): void {\n        this.testService.getControllers().forEach(controller => this.addController(controller));\n        this.testService.onControllersChanged(controllerDelta => {\n            controllerDelta.added?.forEach(controller => this.addController(controller));\n        });\n    }\n    addController(controller: TestController): void {\n        controller.testRuns.forEach(run => this.addRun(run));\n        controller.onRunsChanged(runDelta => {\n            runDelta.added?.forEach(run => this.addRun(run));\n            runDelta.removed?.forEach(run => {\n                this.executionStates.delete(run);\n            });\n        });\n    }\n    addRun(run: TestRun): void {\n        this.executionStates.set(run, new TestExecutionStateMap);\n        run.onDidChangeTestState(updates => {\n            updates.forEach(update => {\n                this.updateState(run, update.test, update.oldState?.state, update.newState?.state);\n            });\n        });\n    }\n\n    protected updateState(run: TestRun, item: TestItem, oldState: TestExecutionState | undefined, newState: TestExecutionState | undefined): void {\n        const map = this.executionStates.get(run)!;\n        map.reportState(item, oldState, newState);\n    }\n\n    getComputedState(run: TestRun, item: TestItem): TestExecutionState | undefined {\n        return this.executionStates.get(run)?.getComputedState(item);\n    }\n}\n\nclass TestExecutionStateMap {\n    reportState(item: TestItem, oldState: TestExecutionState | undefined, newState: TestExecutionState | undefined): void {\n        if (oldState !== newState) {\n            if (item.parent) {\n                this.reportChildStateChanged(item.parent, oldState, newState);\n            }\n        }\n    }\n    reportChildStateChanged(parent: TestItem, oldState: TestExecutionState | undefined, newState: TestExecutionState | undefined): void {\n        if (oldState !== newState) {\n            const currentParentState = this.getComputedState(parent);\n            let counts = this.stateCounts.get(parent);\n            if (!counts) {\n                counts = [];\n                counts[TestExecutionState.Queued] = 0;\n                counts[TestExecutionState.Running] = 0;\n                counts[TestExecutionState.Passed] = 0;\n                counts[TestExecutionState.Failed] = 0;\n                counts[TestExecutionState.Skipped] = 0;\n                counts[TestExecutionState.Errored] = 0;\n                this.stateCounts.set(parent, counts);\n            }\n            if (oldState) {\n                counts[oldState]--;\n            }\n            if (newState) {\n                counts[newState]++;\n            }\n            const newParentState = this.getComputedState(parent);\n            if (parent.parent && currentParentState !== newParentState) {\n                this.reportChildStateChanged(parent.parent, currentParentState, newParentState!);\n            }\n        }\n    }\n\n    private stateCounts: Map<TestItem | TestController, number[]> = new Map();\n\n    updateState(item: TestItem, oldState: TestExecutionState | undefined, newState: TestExecutionState): void {\n        let parent = item.parent;\n        while (parent && 'parent' in parent) { // parent is a test item\n            let counts = this.stateCounts.get(parent);\n            if (!counts) {\n                counts = [];\n                counts[TestExecutionState.Queued] = 0;\n                counts[TestExecutionState.Running] = 0;\n                counts[TestExecutionState.Passed] = 0;\n                counts[TestExecutionState.Failed] = 0;\n                counts[TestExecutionState.Skipped] = 0;\n                counts[TestExecutionState.Errored] = 0;\n                this.stateCounts.set(parent, counts);\n            }\n            if (oldState) {\n                counts[oldState]--;\n            }\n            counts[newState]++;\n            parent = parent.parent;\n        }\n    }\n\n    getComputedState(item: TestItem): TestExecutionState | undefined {\n        const counts = this.stateCounts.get(item);\n        if (counts) {\n            if (counts[TestExecutionState.Errored] > 0) {\n                return TestExecutionState.Errored;\n            } else if (counts[TestExecutionState.Failed] > 0) {\n                return TestExecutionState.Failed;\n            } else if (counts[TestExecutionState.Running] > 0) {\n                return TestExecutionState.Running;\n            } else if (counts[TestExecutionState.Queued] > 0) {\n                return TestExecutionState.Queued;\n            } else if (counts[TestExecutionState.Passed] > 0) {\n                return TestExecutionState.Passed;\n            } else if (counts[TestExecutionState.Skipped] > 0) {\n                return TestExecutionState.Skipped;\n            } else {\n                return undefined;\n            }\n        } else {\n            return undefined;\n        }\n    }\n}\n\n","// *****************************************************************************\n// Copyright (C) 2023 STMicroelectronics and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject, injectable, postConstruct } from '@theia/core/shared/inversify';\nimport { TestController, TestFailure, TestOutputItem, TestRun, TestService, TestState, TestStateChangedEvent } from '../test-service';\nimport { Disposable, Emitter, Event } from '@theia/core';\nimport { TestContextKeyService } from './test-context-key-service';\n\nexport interface ActiveRunEvent {\n    controller: TestController;\n    activeRun: TestRun | undefined\n}\n\nexport interface TestOutputSource {\n    readonly output: readonly TestOutputItem[];\n    onDidAddTestOutput: Event<TestOutputItem[]>;\n}\n\nexport interface ActiveTestStateChangedEvent {\n    controller: TestController;\n    testRun: TestRun;\n    statedDelta: TestStateChangedEvent[];\n}\n\ninterface ActiveTestRunInfo {\n    run: TestRun;\n    toDispose: Disposable;\n}\n\n@injectable()\nexport class TestOutputUIModel {\n    @inject(TestContextKeyService) protected readonly testContextKeys: TestContextKeyService;\n    @inject(TestService) protected testService: TestService;\n\n    protected readonly activeRuns = new Map<string, ActiveTestRunInfo>();\n    protected readonly controllerListeners = new Map<string, Disposable>();\n    private _selectedOutputSource: TestOutputSource | undefined;\n    private _selectedTestState: TestState | undefined;\n\n    @postConstruct()\n    init(): void {\n        this.testService.getControllers().forEach(controller => this.addController(controller));\n        this.testService.onControllersChanged(deltas => {\n            deltas.added?.forEach(controller => this.addController(controller));\n            deltas.removed?.forEach(controller => this.removeController(controller));\n        });\n    }\n\n    protected removeController(id: string): void {\n        this.controllerListeners.get(id)?.dispose();\n        if (this.activeRuns.has(id)) {\n            this.activeRuns.delete(id);\n        }\n    }\n\n    protected addController(controller: TestController): void {\n        this.controllerListeners.set(controller.id, controller.onRunsChanged(delta => {\n            if (delta.added) {\n                const currentRun = controller.testRuns[controller.testRuns.length - 1];\n                if (currentRun) {\n                    this.setActiveTestRun(currentRun);\n                }\n            } else {\n                delta.removed?.forEach(run => {\n                    if (run === this.getActiveTestRun(controller)) {\n                        const currentRun = controller.testRuns[controller.testRuns.length - 1];\n                        this.doSetActiveRun(controller, currentRun);\n                    }\n                });\n            }\n        }));\n    }\n\n    getActiveTestRun(controller: TestController): TestRun | undefined {\n        return this.activeRuns.get(controller.id)?.run;\n    }\n\n    protected readonly onDidChangeActiveTestRunEmitter = new Emitter<ActiveRunEvent>();\n    onDidChangeActiveTestRun: Event<ActiveRunEvent> = this.onDidChangeActiveTestRunEmitter.event;\n\n    setActiveTestRun(run: TestRun): void {\n        this.doSetActiveRun(run.controller, run);\n    }\n\n    doSetActiveRun(controller: TestController, run: TestRun | undefined): void {\n        const old = this.activeRuns.get(controller.id);\n        if (old !== run) {\n            if (old) {\n                old.toDispose.dispose();\n            }\n            if (run) {\n                const toDispose = run.onDidChangeTestState(e => {\n                    this.onDidChangeActiveTestStateEmitter.fire({\n                        controller,\n                        testRun: run,\n                        statedDelta: e\n                    });\n                });\n                this.activeRuns.set(controller.id, { run, toDispose });\n            } else {\n                this.activeRuns.delete(controller.id);\n            }\n            this.onDidChangeActiveTestRunEmitter.fire({ activeRun: run, controller: controller });\n        }\n    }\n\n    private onDidChangeActiveTestStateEmitter: Emitter<ActiveTestStateChangedEvent> = new Emitter();\n    onDidChangeActiveTestState: Event<ActiveTestStateChangedEvent> = this.onDidChangeActiveTestStateEmitter.event;\n\n    get selectedOutputSource(): TestOutputSource | undefined {\n        return this._selectedOutputSource;\n    }\n\n    set selectedOutputSource(element: TestOutputSource | undefined) {\n        if (element !== this._selectedOutputSource) {\n            this._selectedOutputSource = element;\n            this.onDidChangeSelectedOutputSourceEmitter.fire(element);\n        }\n    }\n\n    protected readonly onDidChangeSelectedOutputSourceEmitter = new Emitter<TestOutputSource | undefined>();\n    readonly onDidChangeSelectedOutputSource: Event<TestOutputSource | undefined> = this.onDidChangeSelectedOutputSourceEmitter.event;\n\n    get selectedTestState(): TestState | undefined {\n        return this._selectedTestState;\n    }\n\n    set selectedTestState(element: TestState | undefined) {\n        if (element !== this._selectedTestState) {\n            this._selectedTestState = element;\n            if (this._selectedTestState && TestFailure.is(this._selectedTestState.state)) {\n                const message = this._selectedTestState.state.messages[0];\n                this.testContextKeys.contextValue.set(message.contextValue);\n            } else {\n                this.testContextKeys.contextValue.reset();\n            }\n            this.onDidChangeSelectedTestStateEmitter.fire(element);\n        }\n    }\n\n    protected readonly onDidChangeSelectedTestStateEmitter = new Emitter<TestState | undefined>();\n    readonly onDidChangeSelectedTestState: Event<TestState | undefined> = this.onDidChangeSelectedTestStateEmitter.event;\n}\n","// *****************************************************************************\n// Copyright (C) 2023 STMicroelectronics and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { AbstractViewContribution, Widget } from '@theia/core/lib/browser';\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport { TestRun, TestService } from '../test-service';\nimport { ContextKeyService } from '@theia/core/lib/browser/context-key-service';\nimport { TestRunTreeWidget } from './test-run-widget';\nimport { TEST_VIEW_CONTAINER_ID, TestViewCommands } from './test-view-contribution';\nimport { CommandRegistry, MenuModelRegistry, nls } from '@theia/core';\nimport { TabBarToolbarContribution, TabBarToolbarRegistry } from '@theia/core/lib/browser/shell/tab-bar-toolbar';\n\nexport const TEST_RUNS_CONTEXT_MENU = ['test-runs-context-menu'];\nexport const TEST_RUNS_INLINE_MENU = [...TEST_RUNS_CONTEXT_MENU, 'inline'];\n\n@injectable()\nexport class TestRunViewContribution extends AbstractViewContribution<TestRunTreeWidget> implements TabBarToolbarContribution {\n\n    @inject(TestService) protected readonly testService: TestService;\n    @inject(ContextKeyService) protected readonly contextKeys: ContextKeyService;\n\n    constructor() {\n        super({\n            viewContainerId: TEST_VIEW_CONTAINER_ID,\n            widgetId: TestRunTreeWidget.ID,\n            widgetName: nls.localize('theia/test/testRuns', 'Test Runs'),\n            defaultWidgetOptions: {\n                area: 'left',\n                rank: 200,\n            }\n        });\n    }\n\n    registerToolbarItems(registry: TabBarToolbarRegistry): void {\n        registry.registerItem({\n            id: TestViewCommands.CLEAR_ALL_RESULTS.id,\n            command: TestViewCommands.CLEAR_ALL_RESULTS.id,\n            priority: 1\n        });\n    }\n\n    override registerMenus(menus: MenuModelRegistry): void {\n        super.registerMenus(menus);\n        menus.registerMenuAction(TEST_RUNS_CONTEXT_MENU, {\n            commandId: TestViewCommands.CANCEL_RUN.id\n        });\n    }\n\n    override registerCommands(commands: CommandRegistry): void {\n        super.registerCommands(commands);\n        commands.registerCommand(TestViewCommands.CANCEL_RUN, {\n            isEnabled: t => TestRun.is(t) && t.isRunning,\n            isVisible: t => TestRun.is(t),\n            execute: t => {\n                if (TestRun.is(t)) {\n                    t.cancel();\n                }\n            }\n        });\n\n        commands.registerCommand(TestViewCommands.CLEAR_ALL_RESULTS, {\n            isEnabled: w => this.withWidget(w, () => true),\n            isVisible: w => this.withWidget(w, () => true),\n            execute: () => {\n                this.testService.clearResults();\n            }\n        });\n    }\n\n    protected withWidget<T>(widget: Widget | undefined = this.tryGetWidget(), cb: (widget: TestRunTreeWidget) => T): T | false {\n        if (widget instanceof TestRunTreeWidget && widget.id === TestRunTreeWidget.ID) {\n            return cb(widget);\n        }\n        return false;\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2023 STMicroelectronics and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport { TreeWidget, TreeModel, TreeProps, CompositeTreeNode, TreeNode, TreeImpl, NodeProps, SelectableTreeNode } from '@theia/core/lib/browser/tree';\nimport { ContextMenuRenderer, codicon } from '@theia/core/lib/browser';\nimport { IconThemeService } from '@theia/core/lib/browser/icon-theme-service';\nimport { ThemeService } from '@theia/core/lib/browser/theming';\nimport { ContextKeyService } from '@theia/core/lib/browser/context-key-service';\nimport { TestController, TestExecutionState, TestFailure, TestItem, TestMessage, TestOutputItem, TestRun, TestService } from '../test-service';\nimport * as React from '@theia/core/shared/react';\nimport { Disposable, DisposableCollection, Event, nls } from '@theia/core';\nimport { TestExecutionStateManager } from './test-execution-state-manager';\nimport { TestOutputUIModel } from './test-output-ui-model';\n\nclass TestRunNode implements TreeNode, SelectableTreeNode {\n    constructor(readonly counter: number, readonly id: string, readonly run: TestRun, readonly parent: CompositeTreeNode) { }\n\n    get name(): string {\n        return this.run.name || nls.localize('theia/test/testRunDefaultName', '{0} run {1}', this.run.controller.label, this.counter);\n    };\n\n    expanded?: boolean;\n    selected: boolean = false;\n    children: TestItemNode[] = [];\n}\n\nclass TestItemNode implements TreeNode, SelectableTreeNode {\n    constructor(readonly id: string, readonly item: TestItem, readonly parent: TestRunNode) { }\n    selected: boolean = false;\n\n    get name(): string {\n        return this.item.label;\n    }\n}\n\ninterface RunInfo {\n    node: TestRunNode;\n    disposable: Disposable;\n    tests: Map<TestItem, TestItemNode>;\n}\n\n@injectable()\nexport class TestRunTree extends TreeImpl {\n    private ROOT: CompositeTreeNode = {\n        id: 'TestResults',\n        name: 'Test Results',\n        parent: undefined,\n        children: [],\n        visible: false\n    };\n\n    @inject(TestService) protected readonly testService: TestService;\n\n    private controllerListeners = new Map<string, Disposable>();\n\n    private runs = new Map<TestRun, RunInfo>();\n    private nextId = 0;\n\n    @postConstruct()\n    init(): void {\n        this.root = this.ROOT;\n        this.testService.getControllers().forEach(controller => {\n            this.addController(controller);\n        });\n\n        this.testService.onControllersChanged(controllerDelta => {\n            controllerDelta.removed?.forEach(controller => {\n                this.controllerListeners.get(controller)?.dispose();\n            });\n\n            controllerDelta.added?.forEach(controller => this.addController(controller));\n        });\n    }\n\n    private addController(controller: TestController): void {\n        controller.testRuns.forEach(run => this.addRun(run));\n        const listeners = new DisposableCollection();\n        this.controllerListeners.set(controller.id, listeners);\n\n        listeners.push(controller.onRunsChanged(runDelta => {\n            runDelta.removed?.forEach(run => {\n                this.runs.get(run)?.disposable.dispose();\n                this.runs.delete(run);\n                this.refresh(this.ROOT);\n            });\n            runDelta.added?.forEach(run => {\n                this.addRun(run);\n                this.refresh(this.ROOT);\n            });\n        }));\n    }\n\n    private addRun(run: TestRun): void {\n        const newNode = this.createRunNode(run);\n        const affected: TestItemNode[] = [];\n\n        const disposables = new DisposableCollection();\n\n        disposables.push(run.onDidChangeTestState(deltas => {\n            let needsRefresh = false;\n            deltas.forEach(delta => {\n                if (delta.newState) {\n                    if (delta.newState.state > TestExecutionState.Queued) {\n                        const testNode = info.tests.get(delta.test);\n                        if (!testNode) {\n                            if (info.tests.size === 0) {\n                                newNode.expanded = true;\n                            }\n                            info.tests.set(delta.test, this.createTestItemNode(newNode, delta.test));\n                            needsRefresh = true;\n                        } else {\n                            affected.push(testNode);\n                        }\n                    }\n                } else {\n                    info.tests.delete(delta.test);\n                    needsRefresh = true;\n                }\n            });\n            if (needsRefresh) {\n                this.refresh(newNode);\n            } else {\n                this.onDidUpdateEmitter.fire(affected);\n            }\n        }));\n        disposables.push(run.onDidChangeProperty(() => this.onDidUpdateEmitter.fire([])));\n        const info = {\n            node: newNode,\n            disposable: disposables,\n\n            tests: new Map(run.items.filter(item => (run.getTestState(item)?.state || 0) > TestExecutionState.Queued).map(item => [item, this.createTestItemNode(newNode, item)]))\n        };\n        this.runs.set(run, info);\n    }\n\n    protected createRunNode(run: TestRun): TestRunNode {\n        return new TestRunNode(this.nextId, `id-${this.nextId++}`, run, this.ROOT);\n    }\n\n    createTestItemNode(parent: TestRunNode, item: TestItem): TestItemNode {\n        return new TestItemNode(`testitem-${this.nextId++}`, item, parent);\n    }\n\n    protected override async resolveChildren(parent: CompositeTreeNode): Promise<TreeNode[]> {\n        if (parent === this.ROOT) {\n            return Promise.resolve([...this.runs.values()].reverse().map(info => info.node));\n        } else if (parent instanceof TestRunNode) {\n            const runInfo = this.runs.get(parent.run);\n            if (runInfo) {\n                return Promise.resolve([...runInfo.tests.values()]);\n            } else {\n                return Promise.resolve([]);\n            }\n        } else {\n            return Promise.resolve([]);\n        }\n    }\n}\n\n@injectable()\nexport class TestRunTreeWidget extends TreeWidget {\n\n    static ID = 'test-run-widget';\n\n    @inject(IconThemeService) protected readonly iconThemeService: IconThemeService;\n    @inject(ContextKeyService) protected readonly contextKeys: ContextKeyService;\n    @inject(ThemeService) protected readonly themeService: ThemeService;\n    @inject(TestExecutionStateManager) protected readonly stateManager: TestExecutionStateManager;\n    @inject(TestOutputUIModel) protected readonly uiModel: TestOutputUIModel;\n\n    constructor(\n        @inject(TreeProps) props: TreeProps,\n        @inject(TreeModel) model: TreeModel,\n        @inject(ContextMenuRenderer) contextMenuRenderer: ContextMenuRenderer,\n    ) {\n        super(props, model, contextMenuRenderer);\n        this.id = TestRunTreeWidget.ID;\n        this.title.label = nls.localize('theia/test/testRuns', 'Test Runs');\n        this.title.caption = nls.localize('theia/test/testRuns', 'Test Runs');\n        this.title.iconClass = codicon('run');\n        this.title.closable = true;\n    }\n\n    @postConstruct()\n    protected override init(): void {\n        super.init();\n        this.addClass('theia-test-result-view');\n        this.model.onSelectionChanged(() => {\n            const node = this.model.selectedNodes[0];\n            if (node instanceof TestRunNode) {\n                this.uiModel.selectedOutputSource = {\n                    get output(): readonly TestOutputItem[] {\n                        return node.run.getOutput();\n                    },\n                    onDidAddTestOutput: Event.map(node.run.onDidChangeTestOutput, evt => evt.map(item => item[1]))\n                };\n            } else if (node instanceof TestItemNode) {\n                this.uiModel.selectedOutputSource = {\n                    get output(): readonly TestOutputItem[] {\n                        return node.parent.run.getOutput(node.item);\n                    },\n                    onDidAddTestOutput: Event.map(node.parent.run.onDidChangeTestOutput, evt => evt.filter(item => item[0] === node.item).map(item => item[1]))\n                };\n                this.uiModel.selectedTestState = node.parent.run.getTestState(node.item);\n            }\n        });\n    }\n\n    protected override renderTree(model: TreeModel): React.ReactNode {\n        if (CompositeTreeNode.is(this.model.root) && this.model.root.children.length > 0) {\n            return super.renderTree(model);\n        }\n        return <div className='theia-widget-noInfo noMarkers'>{nls.localizeByDefault('No tests have been found in this workspace yet.')}</div>;\n    }\n\n    protected getTestStateClass(state: TestExecutionState | undefined): string {\n        switch (state) {\n            case TestExecutionState.Queued: return `${codicon('history')} queued`;\n            case TestExecutionState.Running: return `${codicon('sync')} codicon-modifier-spin running`;\n            case TestExecutionState.Skipped: return `${codicon('debug-step-over')} skipped`;\n            case TestExecutionState.Failed: return `${codicon('error')} failed`;\n            case TestExecutionState.Errored: return `${codicon('issues')} errored`;\n            case TestExecutionState.Passed: return `${codicon('pass')} passed`;\n            default: return codicon('circle');\n        }\n    }\n\n    protected override renderIcon(node: TreeNode, props: NodeProps): React.ReactNode {\n        if (node instanceof TestItemNode) {\n            const state = node.parent.run.getTestState(node.item)?.state;\n            return <div className={this.getTestStateClass(state)}></div >;\n        } else if (node instanceof TestRunNode) {\n            const icon = node.run.isRunning ? `${codicon('sync')} codicon-modifier-spin running` : codicon('circle');\n            return <div className={icon}></div >;\n        } else {\n            return super.renderIcon(node, props);\n        }\n    }\n\n    protected override toContextMenuArgs(node: SelectableTreeNode): (TestRun | TestItem | TestMessage[])[] {\n        if (node instanceof TestRunNode) {\n            return [node.run];\n        } else if (node instanceof TestItemNode) {\n            const item = node.item;\n            const executionState = node.parent.run.getTestState(node.item);\n            if (TestFailure.is(executionState)) {\n                return [item, executionState.messages];\n            }\n            return [item];\n        }\n        return [];\n    }\n\n    override storeState(): object {\n        return {}; // don't store any state for now\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2023 STMicroelectronics and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport {\n    TreeWidget, TreeModel, TreeProps, CompositeTreeNode, ExpandableTreeNode, TreeNode, TreeImpl, NodeProps,\n    TREE_NODE_SEGMENT_CLASS, TREE_NODE_TAIL_CLASS, SelectableTreeNode\n} from '@theia/core/lib/browser/tree';\nimport { ACTION_ITEM, ContextMenuRenderer, KeybindingRegistry, codicon } from '@theia/core/lib/browser';\nimport { IconThemeService } from '@theia/core/lib/browser/icon-theme-service';\nimport { ThemeService } from '@theia/core/lib/browser/theming';\nimport { ContextKeyService } from '@theia/core/lib/browser/context-key-service';\nimport { TestController, TestExecutionState, TestItem, TestService } from '../test-service';\nimport * as React from '@theia/core/shared/react';\nimport { DeltaKind, TreeDelta } from '../../common/tree-delta';\nimport { ActionMenuNode, CommandRegistry, Disposable, DisposableCollection, Event, MenuModelRegistry, nls } from '@theia/core';\nimport { TestExecutionStateManager } from './test-execution-state-manager';\nimport { TestOutputUIModel } from './test-output-ui-model';\nimport { TEST_VIEW_INLINE_MENU } from './test-view-contribution';\n\nconst ROOT_ID = 'TestTree';\n\nexport interface TestRoot extends CompositeTreeNode {\n    children: TestControllerNode[];\n}\nexport namespace TestRoot {\n    export function is(node: unknown): node is TestRoot {\n        return CompositeTreeNode.is(node) && node.id === ROOT_ID;\n    }\n}\nexport interface TestControllerNode extends ExpandableTreeNode {\n    controller: TestController;\n}\n\nexport namespace TestControllerNode {\n    export function is(node: unknown): node is TestControllerNode {\n        return ExpandableTreeNode.is(node) && 'controller' in node;\n    }\n}\n\nexport interface TestItemNode extends TreeNode {\n    controller: TestController;\n    testItem: TestItem;\n}\n\nexport namespace TestItemNode {\n    export function is(node: unknown): node is TestItemNode {\n        return TreeNode.is(node) && 'testItem' in node;\n    }\n}\n\n@injectable()\nexport class TestTree extends TreeImpl {\n    @inject(TestService) protected readonly testService: TestService;\n\n    private controllerListeners = new Map<string, Disposable>();\n\n    @postConstruct()\n    init(): void {\n        this.testService.getControllers().forEach(controller => this.addController(controller));\n        this.testService.onControllersChanged(e => {\n            e.removed?.forEach(controller => {\n                this.controllerListeners.get(controller)?.dispose();\n            });\n\n            e.added?.forEach(controller => this.addController(controller));\n\n            this.refresh(this.root as CompositeTreeNode);\n        });\n    }\n\n    protected addController(controller: TestController): void {\n        const listeners = new DisposableCollection();\n        this.controllerListeners.set(controller.id, listeners);\n        listeners.push(controller.onItemsChanged(delta => {\n            this.processDeltas(controller, controller, delta);\n        }));\n    }\n\n    protected override async resolveChildren(parent: CompositeTreeNode): Promise<TreeNode[]> {\n        if (TestItemNode.is(parent)) {\n            parent.testItem.resolveChildren();\n            return Promise.resolve(parent.testItem.tests.map(test => this.createTestNode(parent.controller, parent, test)));\n        } else if (TestControllerNode.is(parent)) {\n            return Promise.resolve(parent.controller.tests.map(test => this.createTestNode(parent.controller, parent, test)));\n        } else if (TestRoot.is(parent)) {\n            return Promise.resolve(this.testService.getControllers().map(controller => this.createControllerNode(parent, controller)));\n        } else {\n            return Promise.resolve([]);\n        }\n    }\n\n    createControllerNode(parent: CompositeTreeNode, controller: TestController): TestControllerNode {\n        const node: TestControllerNode = {\n            id: controller.id,\n            name: controller.label,\n            controller: controller,\n            expanded: false,\n            children: [],\n            parent: parent\n        };\n\n        return node;\n    }\n\n    protected processDeltas(controller: TestController, parent: TestItem | TestController, deltas: TreeDelta<string, TestItem>[]): void {\n        deltas.forEach(delta => this.processDelta(controller, parent, delta));\n    }\n\n    protected processDelta(controller: TestController, parent: TestItem | TestController, delta: TreeDelta<string, TestItem>): void {\n        if (delta.type === DeltaKind.ADDED || delta.type === DeltaKind.REMOVED) {\n            let node;\n            if (parent === controller && delta.path.length === 1) {\n                node = this.getNode(this.computeId([controller.id]));\n            } else {\n                const item = this.findInParent(parent, delta.path.slice(0, delta.path.length - 1), 0);\n                if (item) {\n                    node = this.getNode(this.computeId(this.computePath(controller, item as TestItem)));\n                }\n            }\n            if (node) {\n                this.refresh(node as CompositeTreeNode); // we only have composite tree nodes in this tree\n            } else {\n                console.warn('delta for unknown test item');\n            }\n        } else {\n            const item = this.findInParent(parent, delta.path, 0);\n            if (item) {\n                if (delta.type === DeltaKind.CHANGED) {\n                    this.fireChanged();\n                }\n                if (delta.childDeltas) {\n                    this.processDeltas(controller, item, delta.childDeltas);\n                }\n            } else {\n                console.warn('delta for unknown test item');\n            }\n        }\n    }\n\n    protected findInParent(root: TestItem | TestController, path: string[], startIndex: number): TestItem | TestController | undefined {\n        if (startIndex >= path.length) {\n            return root;\n        }\n        const child = root.tests.find(candidate => candidate.id === path[startIndex]);\n        if (!child) {\n            return undefined;\n        }\n        return this.findInParent(child, path, startIndex + 1);\n    }\n\n    protected computePath(controller: TestController, item: TestItem): string[] {\n        const result: string[] = [controller.id];\n        let current: TestItem | undefined = item;\n        while (current) {\n            result.unshift(current.id);\n            current = current.parent;\n        }\n        return result;\n    }\n\n    protected computeId(path: string[]): string {\n        return path.map(id => id.replace('/', '//')).join('/');\n    }\n\n    createTestNode(controller: TestController, parent: CompositeTreeNode, test: TestItem): TestItemNode {\n        const previous = this.getNode(test.id);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const result: any = {\n            id: this.computeId(this.computePath(controller, test)),\n            name: test.label,\n            controller: controller,\n            testItem: test,\n            expanded: ExpandableTreeNode.is(previous) ? previous.expanded : undefined,\n            selected: false,\n            children: [] as TestItemNode[],\n            parent: parent\n        };\n        result.children = test.tests.map(t => this.createTestNode(controller, result, t));\n        if (result.children.length === 0 && !test.canResolveChildren) {\n            delete result.expanded;\n        }\n        return result;\n    }\n}\n\n@injectable()\nexport class TestTreeWidget extends TreeWidget {\n\n    static ID = 'test-tree-widget';\n\n    static TEST_CONTEXT_MENU = ['RESOURCE_CONTEXT_MENU'];\n\n    @inject(IconThemeService) protected readonly iconThemeService: IconThemeService;\n    @inject(ContextKeyService) protected readonly contextKeys: ContextKeyService;\n    @inject(ThemeService) protected readonly themeService: ThemeService;\n    @inject(TestExecutionStateManager) protected readonly stateManager: TestExecutionStateManager;\n    @inject(TestOutputUIModel) protected uiModel: TestOutputUIModel;\n    @inject(MenuModelRegistry) protected readonly menus: MenuModelRegistry;\n    @inject(CommandRegistry) readonly commands: CommandRegistry;\n    @inject(KeybindingRegistry) protected readonly keybindings: KeybindingRegistry;\n\n    constructor(\n        @inject(TreeProps) props: TreeProps,\n        @inject(TreeModel) model: TreeModel,\n        @inject(ContextMenuRenderer) contextMenuRenderer: ContextMenuRenderer,\n    ) {\n        super(props, model, contextMenuRenderer);\n        this.id = TestTreeWidget.ID;\n        this.title.label = nls.localizeByDefault('Test Explorer');\n        this.title.caption = nls.localizeByDefault('Test Explorer');\n        this.title.iconClass = codicon('beaker');\n        this.title.closable = true;\n    }\n\n    @postConstruct()\n    protected override init(): void {\n        super.init();\n        this.addClass('theia-test-view');\n        this.model.root = {\n            id: ROOT_ID,\n            parent: undefined,\n            visible: false,\n            children: []\n        } as TestRoot;\n\n        this.uiModel.onDidChangeActiveTestRun(e => this.update());\n        this.uiModel.onDidChangeActiveTestState(() => this.update());\n\n        this.model.onSelectionChanged(() => {\n            const that = this;\n            const node = this.model.selectedNodes[0];\n            if (TestItemNode.is(node)) {\n                const run = that.uiModel.getActiveTestRun(node.controller);\n                if (run) {\n                    const output = run?.getOutput(node.testItem);\n                    if (output) {\n                        this.uiModel.selectedOutputSource = {\n                            output: output,\n                            onDidAddTestOutput: Event.map(run.onDidChangeTestOutput, evt => evt.filter(item => item[0] === node.testItem).map(item => item[1]))\n                        };\n                    }\n                    this.uiModel.selectedTestState = run.getTestState(node.testItem);\n                }\n            }\n        });\n    }\n\n    protected override renderTree(model: TreeModel): React.ReactNode {\n        if (TestRoot.is(model.root) && model.root.children.length > 0) {\n            return super.renderTree(model);\n        }\n        return <div className='theia-widget-noInfo noMarkers'>{nls.localizeByDefault('No tests have been found in this workspace yet.')}</div>;\n    }\n\n    protected getTestStateClass(state: TestExecutionState | undefined): string {\n        switch (state) {\n            case TestExecutionState.Queued: return `${codicon('history')} queued`;\n            case TestExecutionState.Running: return `${codicon('sync')} codicon-modifier-spin running`;\n            case TestExecutionState.Skipped: return `${codicon('debug-step-over')} skipped`;\n            case TestExecutionState.Failed: return `${codicon('error')} failed`;\n            case TestExecutionState.Errored: return `${codicon('issues')} errored`;\n            case TestExecutionState.Passed: return `${codicon('pass')} passed`;\n            case TestExecutionState.Running: return `${codicon('sync-spin')} running`;\n            default: return codicon('circle');\n        }\n    }\n\n    protected override renderIcon(node: TreeNode, props: NodeProps): React.ReactNode {\n        if (TestItemNode.is(node)) {\n            const currentRun = this.uiModel.getActiveTestRun(node.controller);\n            let state;\n            if (currentRun) {\n                state = currentRun.getTestState(node.testItem)?.state;\n                if (!state) {\n                    state = this.stateManager.getComputedState(currentRun, node.testItem);\n                }\n            }\n            return <div className={this.getTestStateClass(state)}></div >;\n        } else {\n            return super.renderIcon(node, props);\n        }\n    }\n\n    protected override renderTailDecorations(node: TreeNode, props: NodeProps): React.ReactNode {\n        if (TestItemNode.is(node)) {\n            const testItem = node.testItem;\n            return this.contextKeys.with({ view: this.id, controllerId: node.controller.id, testId: testItem.id, testItemHasUri: !!testItem.uri }, () => {\n                const menu = this.menus.getMenu(TEST_VIEW_INLINE_MENU);\n                const args = [node.testItem];\n                const inlineCommands = menu.children.filter((item): item is ActionMenuNode => item instanceof ActionMenuNode);\n                const tailDecorations = super.renderTailDecorations(node, props);\n                return <React.Fragment>\n                    {inlineCommands.length > 0 && <div className={TREE_NODE_SEGMENT_CLASS + ' flex'}>\n                        {inlineCommands.map((item, index) => this.renderInlineCommand(item, index, this.focusService.hasFocus(node), args))}\n                    </div>}\n                    {tailDecorations !== undefined && <div className={TREE_NODE_SEGMENT_CLASS + ' flex'}>{tailDecorations}</div>}\n                </React.Fragment>;\n            });\n        } else {\n            return super.renderTailDecorations(node, props);\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected renderInlineCommand(actionMenuNode: ActionMenuNode, index: number, tabbable: boolean, args: any[]): React.ReactNode {\n        if (!actionMenuNode.icon || !this.commands.isVisible(actionMenuNode.command, ...args) || (actionMenuNode.when && !this.contextKeys.match(actionMenuNode.when))) {\n            return false;\n        }\n        const className = [TREE_NODE_SEGMENT_CLASS, TREE_NODE_TAIL_CLASS, actionMenuNode.icon, ACTION_ITEM, 'theia-test-tree-inline-action'].join(' ');\n        const tabIndex = tabbable ? 0 : undefined;\n        const titleString = actionMenuNode.label + this.resolveKeybindingForCommand(actionMenuNode.command);\n\n        return <div key={index} className={className} title={titleString} tabIndex={tabIndex} onClick={e => {\n            e.stopPropagation();\n            this.commands.executeCommand(actionMenuNode.command, ...args);\n        }} />;\n    }\n\n    protected resolveKeybindingForCommand(command: string | undefined): string {\n        let result = '';\n        if (command) {\n            const bindings = this.keybindings.getKeybindingsForCommand(command);\n            let found = false;\n            if (bindings && bindings.length > 0) {\n                bindings.forEach(binding => {\n                    if (!found && this.keybindings.isEnabledInScope(binding, this.node)) {\n                        found = true;\n                        result = ` (${this.keybindings.acceleratorFor(binding, '+')})`;\n                    }\n                });\n            }\n        }\n        return result;\n    }\n\n    protected override toContextMenuArgs(node: SelectableTreeNode): (TestItem)[] {\n        if (TestItemNode.is(node)) {\n            return [node.testItem];\n        }\n        return [];\n    }\n\n    override storeState(): object {\n        return {}; // don't store any state for now\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2023 STMicroelectronics and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { AbstractViewContribution, FrontendApplicationContribution, ViewContainerTitleOptions, Widget, codicon } from '@theia/core/lib/browser';\nimport { Command, CommandRegistry, MenuModelRegistry, nls } from '@theia/core';\nimport { inject, injectable } from '@theia/core/shared/inversify';\nimport { TestItem, TestRunProfileKind, TestService } from '../test-service';\nimport { ContextKeyService } from '@theia/core/lib/browser/context-key-service';\nimport { TestTreeWidget } from './test-tree-widget';\nimport { TabBarToolbarContribution, TabBarToolbarRegistry } from '@theia/core/lib/browser/shell/tab-bar-toolbar';\nimport { TestCommandId } from '../constants';\nimport { NavigationLocationService } from '@theia/editor/lib/browser/navigation/navigation-location-service';\nimport { NavigationLocation } from '@theia/editor/lib/browser/navigation/navigation-location';\nimport { FileService } from '@theia/filesystem/lib/browser/file-service';\nimport { FileNavigatorCommands } from '@theia/navigator/lib/browser/file-navigator-commands';\n\nexport namespace TestViewCommands {\n    /**\n     * Command which refreshes all test.\n     */\n    export const REFRESH: Command = Command.toDefaultLocalizedCommand({\n        id: TestCommandId.RefreshTestsAction,\n        label: 'Refresh Tests',\n        category: 'Test',\n        iconClass: codicon('refresh')\n    });\n\n    /**\n     * Command which cancels the refresh\n     */\n    export const CANCEL_REFRESH: Command = Command.toDefaultLocalizedCommand({\n        id: TestCommandId.CancelTestRefreshAction,\n        label: 'Cancel Test Refresh',\n        category: 'Test',\n        iconClass: codicon('stop')\n    });\n\n    export const RUN_ALL_TESTS: Command = Command.toDefaultLocalizedCommand({\n        id: TestCommandId.RunAllAction,\n        label: 'Run All Tests',\n        category: 'Test',\n        iconClass: codicon('run-all')\n    });\n\n    export const DEBUG_ALL_TESTS: Command = Command.toDefaultLocalizedCommand({\n        id: TestCommandId.DebugAllAction,\n        label: 'Debug Tests',\n        category: 'Test',\n        iconClass: codicon('debug-all')\n    });\n\n    export const RUN_TEST: Command = Command.toDefaultLocalizedCommand({\n        id: TestCommandId.RunAction,\n        label: 'Run Test',\n        category: 'Test',\n        iconClass: codicon('run')\n    });\n\n    export const RUN_TEST_WITH_PROFILE: Command = Command.toDefaultLocalizedCommand({\n        id: TestCommandId.RunUsingProfileAction,\n        category: 'Test',\n        label: 'Execute using Profile...'\n    });\n\n    export const DEBUG_TEST: Command = Command.toDefaultLocalizedCommand({\n        id: TestCommandId.DebugAction,\n        label: 'Debug Test',\n        category: 'Test',\n        iconClass: codicon('debug-alt')\n    });\n\n    export const CANCEL_ALL_RUNS: Command = Command.toLocalizedCommand({\n        id: 'testing.cancelAllRuns',\n        label: 'Cancel All Test Runs',\n        category: 'Test',\n        iconClass: codicon('debug-stop')\n    }, 'theia/test/cancelAllTestRuns', nls.getDefaultKey('Test'));\n\n    export const CANCEL_RUN: Command = Command.toDefaultLocalizedCommand({\n        id: TestCommandId.CancelTestRunAction,\n        label: 'Cancel Test Run',\n        category: 'Test',\n        iconClass: codicon('debug-stop')\n    });\n\n    export const GOTO_TEST: Command = Command.toDefaultLocalizedCommand({\n        id: TestCommandId.GoToTest,\n        label: 'Go to Test',\n        category: 'Test',\n        iconClass: codicon('go-to-file')\n    });\n\n    export const CONFIGURE_PROFILES: Command = Command.toDefaultLocalizedCommand({\n        id: TestCommandId.ConfigureTestProfilesAction,\n        label: 'Configure Test Profiles',\n        category: 'Test'\n    });\n\n    export const SELECT_DEFAULT_PROFILES: Command = Command.toDefaultLocalizedCommand({\n        id: TestCommandId.SelectDefaultTestProfiles,\n        label: 'Select Default Test Profiles...',\n        category: 'Test'\n    });\n\n    export const CLEAR_ALL_RESULTS: Command = Command.toDefaultLocalizedCommand({\n        id: TestCommandId.ClearTestResultsAction,\n        label: 'Clear All Results',\n        category: 'Test',\n        iconClass: codicon('trash')\n    });\n}\n\nexport const TEST_VIEW_CONTEXT_MENU = ['test-view-context-menu'];\nexport const TEST_VIEW_INLINE_MENU = [...TEST_VIEW_CONTEXT_MENU, 'inline'];\n\nexport const TEST_VIEW_CONTAINER_ID = 'test-view-container';\nexport const TEST_VIEW_CONTAINER_TITLE_OPTIONS: ViewContainerTitleOptions = {\n    label: nls.localizeByDefault('Testing'),\n    iconClass: codicon('beaker'),\n    closeable: true\n};\n\n@injectable()\nexport class TestViewContribution extends AbstractViewContribution<TestTreeWidget> implements\n    FrontendApplicationContribution, TabBarToolbarContribution {\n\n    @inject(TestService) protected readonly testService: TestService;\n    @inject(ContextKeyService) protected readonly contextKeys: ContextKeyService;\n    @inject(NavigationLocationService) navigationService: NavigationLocationService;\n    @inject(FileService) fileSystem: FileService;\n\n    constructor() {\n        super({\n            viewContainerId: TEST_VIEW_CONTAINER_ID,\n            widgetId: TestTreeWidget.ID,\n            widgetName: nls.localizeByDefault('Test Explorer'),\n            defaultWidgetOptions: {\n                area: 'left',\n                rank: 600,\n            }\n        });\n    }\n\n    async initializeLayout(): Promise<void> {\n        await this.openView({ activate: false });\n    }\n\n    override registerCommands(commands: CommandRegistry): void {\n        super.registerCommands(commands);\n        commands.registerCommand(TestViewCommands.REFRESH, {\n            isEnabled: w => this.withWidget(w, () => !this.testService.isRefreshing),\n            isVisible: w => this.withWidget(w, () => !this.testService.isRefreshing),\n            execute: () => this.testService.refresh()\n        });\n\n        commands.registerCommand(TestViewCommands.CANCEL_REFRESH, {\n            isEnabled: w => this.withWidget(w, () => this.testService.isRefreshing),\n            isVisible: w => this.withWidget(w, () => this.testService.isRefreshing),\n            execute: () => this.testService.cancelRefresh()\n        });\n\n        commands.registerCommand(TestViewCommands.RUN_ALL_TESTS, {\n            isEnabled: w => this.withWidget(w, () => true),\n            isVisible: w => this.withWidget(w, () => true),\n            execute: () => this.testService.runAllTests(TestRunProfileKind.Run)\n        });\n\n        commands.registerCommand(TestViewCommands.DEBUG_ALL_TESTS, {\n            isEnabled: w => this.withWidget(w, () => true),\n            isVisible: w => this.withWidget(w, () => true),\n            execute: () => this.testService.runAllTests(TestRunProfileKind.Debug)\n        });\n\n        commands.registerCommand(TestViewCommands.RUN_TEST, {\n            isEnabled: t => TestItem.is(t),\n            isVisible: t => TestItem.is(t),\n            execute: t => {\n                this.testService.runTests(TestRunProfileKind.Run, [t]);\n            }\n        });\n\n        commands.registerCommand(TestViewCommands.SELECT_DEFAULT_PROFILES, {\n            isEnabled: t => TestItem.is(t),\n            isVisible: t => TestItem.is(t),\n            execute: () => {\n                this.testService.selectDefaultProfile();\n            }\n        });\n\n        commands.registerCommand(TestViewCommands.DEBUG_TEST, {\n            isEnabled: t => TestItem.is(t),\n            isVisible: t => TestItem.is(t),\n            execute: t => {\n                this.testService.runTests(TestRunProfileKind.Debug, [t]);\n            }\n        });\n\n        commands.registerCommand(TestViewCommands.RUN_TEST_WITH_PROFILE, {\n            isEnabled: t => TestItem.is(t),\n            isVisible: t => TestItem.is(t),\n            execute: t => {\n                this.testService.runTestsWithProfile([t]);\n            }\n        });\n\n        commands.registerCommand(TestViewCommands.CANCEL_ALL_RUNS, {\n            isEnabled: w => this.withWidget(w, () => true),\n            isVisible: w => this.withWidget(w, () => true),\n            execute: () => this.cancelAllRuns()\n        });\n\n        commands.registerCommand(TestViewCommands.GOTO_TEST, {\n            isEnabled: t => TestItem.is(t) && !!t.uri,\n            isVisible: t => TestItem.is(t) && !!t.uri,\n            execute: t => {\n                if (TestItem.is(t)) {\n                    this.fileSystem.resolve(t.uri!).then(stat => {\n                        if (stat.isFile) {\n                            this.navigationService.reveal(NavigationLocation.create(t.uri!, t.range ? t.range.start : { line: 0, character: 0 }));\n                        } else {\n                            commands.executeCommand(FileNavigatorCommands.REVEAL_IN_NAVIGATOR.id, t.uri!);\n                        }\n                    });\n                }\n            }\n        });\n\n        commands.registerCommand(TestViewCommands.CONFIGURE_PROFILES, {\n            execute: () => {\n                this.testService.configureProfile();\n            }\n        });\n    }\n\n    protected cancelAllRuns(): void {\n        this.testService.getControllers().forEach(controller => controller.testRuns.forEach(run => run.cancel()));\n    }\n\n    override registerMenus(menus: MenuModelRegistry): void {\n        super.registerMenus(menus);\n        menus.registerMenuAction(TEST_VIEW_INLINE_MENU, {\n            commandId: TestViewCommands.RUN_TEST.id,\n            order: 'a'\n        });\n        menus.registerMenuAction(TEST_VIEW_INLINE_MENU, {\n            commandId: TestViewCommands.DEBUG_TEST.id,\n            order: 'aa'\n        });\n        menus.registerMenuAction(TEST_VIEW_INLINE_MENU, {\n            commandId: TestViewCommands.GOTO_TEST.id,\n            order: 'aaa'\n        });\n\n        menus.registerMenuAction(TEST_VIEW_CONTEXT_MENU, {\n            commandId: TestViewCommands.RUN_TEST_WITH_PROFILE.id,\n            order: 'aaaa'\n        });\n\n        menus.registerMenuAction(TEST_VIEW_CONTEXT_MENU, {\n            commandId: TestViewCommands.SELECT_DEFAULT_PROFILES.id,\n            order: 'aaaaa'\n        });\n    }\n\n    registerToolbarItems(toolbar: TabBarToolbarRegistry): void {\n        toolbar.registerItem({\n            id: TestViewCommands.REFRESH.id,\n            command: TestViewCommands.REFRESH.id,\n            priority: 0,\n            onDidChange: this.testService.onDidChangeIsRefreshing\n        });\n\n        toolbar.registerItem({\n            id: TestViewCommands.CANCEL_REFRESH.id,\n            command: TestViewCommands.CANCEL_REFRESH.id,\n            priority: 0,\n            onDidChange: this.testService.onDidChangeIsRefreshing\n        });\n\n        toolbar.registerItem({\n            id: TestViewCommands.RUN_ALL_TESTS.id,\n            command: TestViewCommands.RUN_ALL_TESTS.id,\n            priority: 1\n        });\n\n        toolbar.registerItem({\n            id: TestViewCommands.DEBUG_ALL_TESTS.id,\n            command: TestViewCommands.DEBUG_ALL_TESTS.id,\n            priority: 2\n        });\n\n        toolbar.registerItem({\n            id: TestViewCommands.CANCEL_ALL_RUNS.id,\n            command: TestViewCommands.CANCEL_ALL_RUNS.id,\n            priority: 3\n        });\n\n    }\n\n    protected withWidget<T>(widget: Widget | undefined = this.tryGetWidget(), cb: (widget: TestTreeWidget) => T): T | false {\n        if (widget instanceof TestTreeWidget && widget.id === TestTreeWidget.ID) {\n            return cb(widget);\n        }\n        return false;\n    }\n}\n"],"names":[],"sourceRoot":""}