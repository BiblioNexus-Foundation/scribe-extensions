exports.id = "vendors-node_modules_theia_plugin-ext-vscode_lib_node_plugin-vscode-init_js";
exports.ids = ["vendors-node_modules_theia_plugin-ext-vscode_lib_node_plugin-vscode-init_js"];
exports.modules = {

/***/ "../node_modules/@theia/application-package/lib/api.js":
/*!*************************************************************!*\
  !*** ../node_modules/@theia/application-package/lib/api.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2021 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEFAULT_SUPPORTED_API_VERSION = void 0;
/**
 * The default supported API version the framework supports.
 * The version should be in the format `x.y.z`.
 */
exports.DEFAULT_SUPPORTED_API_VERSION = '1.90.2';


/***/ }),

/***/ "../node_modules/@theia/core/shared/@theia/application-package/lib/api/index.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@theia/core/shared/@theia/application-package/lib/api/index.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! @theia/application-package/lib/api */ "../node_modules/@theia/application-package/lib/api.js");


/***/ }),

/***/ "../node_modules/@theia/plugin-ext-vscode/lib/common/plugin-vscode-types.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@theia/plugin-ext-vscode/lib/common/plugin-vscode-types.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2020 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VSX_REGISTRY_URL_DEFAULT = exports.VSCODE_DEFAULT_API_VERSION = void 0;
const api_1 = __webpack_require__(/*! @theia/core/shared/@theia/application-package/lib/api */ "../node_modules/@theia/core/shared/@theia/application-package/lib/api/index.js");
exports.VSCODE_DEFAULT_API_VERSION = api_1.DEFAULT_SUPPORTED_API_VERSION;
exports.VSX_REGISTRY_URL_DEFAULT = 'https://open-vsx.org';


/***/ }),

/***/ "../node_modules/@theia/plugin-ext-vscode/lib/node/plugin-vscode-init.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@theia/plugin-ext-vscode/lib/node/plugin-vscode-init.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018-2019 Red Hat, Inc.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.doInitialization = void 0;
const plugin_ext_1 = __webpack_require__(/*! @theia/plugin-ext */ "../node_modules/@theia/plugin-ext/lib/common/index.js");
const plugin_vscode_types_1 = __webpack_require__(/*! ../common/plugin-vscode-types */ "../node_modules/@theia/plugin-ext-vscode/lib/common/plugin-vscode-types.js");
process.env['VSCODE_PID'] = process.env['THEIA_PARENT_PID'];
const pluginsApiImpl = new Map();
const plugins = new Array();
let defaultApi;
let isLoadOverride = false;
let pluginApiFactory;
const doInitialization = (apiFactory, plugin) => {
    pluginsApiImpl.set(plugin.model.id, createVSCodeAPI(apiFactory, plugin));
    plugins.push(plugin);
    pluginApiFactory = apiFactory;
    if (!isLoadOverride) {
        overrideInternalLoad();
        isLoadOverride = true;
    }
};
exports.doInitialization = doInitialization;
function createVSCodeAPI(apiFactory, plugin) {
    const vscode = apiFactory(plugin);
    // override the version for vscode to be a VSCode version
    vscode.version = process.env['VSCODE_API_VERSION'] || plugin_vscode_types_1.VSCODE_DEFAULT_API_VERSION;
    return vscode;
}
function overrideInternalLoad() {
    const module = __webpack_require__(/*! module */ "module");
    const vscodeModuleName = 'vscode';
    // save original load method
    const internalLoad = module._load;
    // if we try to resolve theia module, return the filename entry to use cache.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    module._load = function (request, parent, isMain) {
        if (request !== vscodeModuleName) {
            return internalLoad.apply(this, arguments);
        }
        const plugin = findPlugin(parent.filename);
        if (plugin) {
            const apiImpl = pluginsApiImpl.get(plugin.model.id);
            return apiImpl;
        }
        if (!defaultApi) {
            console.warn(`Could not identify plugin for 'Theia' require call from ${parent.filename}`);
            defaultApi = createVSCodeAPI(pluginApiFactory, plugin_ext_1.emptyPlugin);
        }
        return defaultApi;
    };
}
function findPlugin(filePath) {
    return plugins.find(plugin => filePath.startsWith(plugin.pluginFolder));
}


/***/ }),

/***/ "../node_modules/@theia/plugin-ext/lib/common/index.js":
/*!*************************************************************!*\
  !*** ../node_modules/@theia/plugin-ext/lib/common/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.mjs");
// Here we expose types from @theia/plugin, so it becomes a direct dependency
tslib_1.__exportStar(__webpack_require__(/*! ./plugin-protocol */ "../node_modules/@theia/plugin-ext/lib/common/plugin-protocol.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./plugin-api-rpc */ "../node_modules/@theia/plugin-ext/lib/common/plugin-api-rpc.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./plugin-ext-api-contribution */ "../node_modules/@theia/plugin-ext/lib/common/plugin-ext-api-contribution.js"), exports);
const rpc_protocol_1 = __webpack_require__(/*! ./rpc-protocol */ "../node_modules/@theia/plugin-ext/lib/common/rpc-protocol.js");
(0, rpc_protocol_1.registerMsgPackExtensions)();


/***/ }),

/***/ "../node_modules/@theia/plugin-ext/lib/common/plugin-ext-api-contribution.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@theia/plugin-ext/lib/common/plugin-ext-api-contribution.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MainPluginApiProvider = exports.ExtPluginApiProvider = void 0;
exports.ExtPluginApiProvider = 'extPluginApi';
exports.MainPluginApiProvider = Symbol('mainPluginApi');


/***/ }),

/***/ "../node_modules/@theia/plugin-ext/lib/common/plugin-identifiers.js":
/*!**************************************************************************!*\
  !*** ../node_modules/@theia/plugin-ext/lib/common/plugin-identifiers.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginIdentifiers = void 0;
var PluginIdentifiers;
(function (PluginIdentifiers) {
    /** Unpublished plugins (not from Open VSX or VSCode plugin store) may not have a `publisher` field. */
    PluginIdentifiers.UNPUBLISHED = '<unpublished>';
    /**
     * @returns a string in the format `<publisher>.<name>`
     */
    function componentsToUnversionedId({ publisher = PluginIdentifiers.UNPUBLISHED, name }) {
        return `${publisher.toLowerCase()}.${name.toLowerCase()}`;
    }
    PluginIdentifiers.componentsToUnversionedId = componentsToUnversionedId;
    /**
     * @returns a string in the format `<publisher>.<name>@<version>`.
     */
    function componentsToVersionedId({ publisher = PluginIdentifiers.UNPUBLISHED, name, version }) {
        return `${publisher.toLowerCase()}.${name.toLowerCase()}@${version}`;
    }
    PluginIdentifiers.componentsToVersionedId = componentsToVersionedId;
    function componentsToVersionWithId(components) {
        return { id: componentsToUnversionedId(components), version: components.version };
    }
    PluginIdentifiers.componentsToVersionWithId = componentsToVersionWithId;
    /**
     * @returns a string in the format `<id>@<version>`.
     */
    function idAndVersionToVersionedId({ id, version }) {
        return `${id}@${version}`;
    }
    PluginIdentifiers.idAndVersionToVersionedId = idAndVersionToVersionedId;
    /**
     * @returns a string in the format `<publisher>.<name>`.
     */
    function unversionedFromVersioned(id) {
        const endOfId = id.indexOf('@');
        return id.slice(0, endOfId);
    }
    PluginIdentifiers.unversionedFromVersioned = unversionedFromVersioned;
    /**
     * @returns `undefined` if it looks like the string passed in does not have the format returned by {@link PluginIdentifiers.toVersionedId}.
     */
    function identifiersFromVersionedId(probablyId) {
        const endOfPublisher = probablyId.indexOf('.');
        const endOfName = probablyId.indexOf('@', endOfPublisher);
        if (endOfPublisher === -1 || endOfName === -1) {
            return undefined;
        }
        return { publisher: probablyId.slice(0, endOfPublisher), name: probablyId.slice(endOfPublisher + 1, endOfName), version: probablyId.slice(endOfName + 1) };
    }
    PluginIdentifiers.identifiersFromVersionedId = identifiersFromVersionedId;
    /**
     * @returns `undefined` if it looks like the string passed in does not have the format returned by {@link PluginIdentifiers.toVersionedId}.
     */
    function idAndVersionFromVersionedId(probablyId) {
        const endOfPublisher = probablyId.indexOf('.');
        const endOfName = probablyId.indexOf('@', endOfPublisher);
        if (endOfPublisher === -1 || endOfName === -1) {
            return undefined;
        }
        return { id: probablyId.slice(0, endOfName), version: probablyId.slice(endOfName + 1) };
    }
    PluginIdentifiers.idAndVersionFromVersionedId = idAndVersionFromVersionedId;
})(PluginIdentifiers || (exports.PluginIdentifiers = PluginIdentifiers = {}));


/***/ }),

/***/ "../node_modules/@theia/plugin-ext/lib/common/plugin-protocol.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@theia/plugin-ext/lib/common/plugin-protocol.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginHostEnvironmentVariable = exports.ServerPluginRunner = exports.PluginServer = exports.pluginServerJsonRpcPath = exports.PLUGIN_HOST_BACKEND = exports.HostedPluginServer = exports.PluginDeployerHandler = exports.HostedPluginClient = exports.buildFrontendModuleName = exports.getPluginId = exports.MetadataProcessor = exports.IconContribution = exports.PluginType = exports.PluginDeployerEntryType = exports.PluginDeployerParticipant = exports.PluginDeployer = exports.PluginDeployerFileHandler = exports.PluginDeployerDirectoryHandler = exports.PluginDeployerResolver = exports.PluginScanner = exports.PluginViewType = exports.CustomEditorPriority = exports.PluginPackage = exports.hostedServicePath = exports.PluginIdentifiers = void 0;
const plugin_identifiers_1 = __webpack_require__(/*! ./plugin-identifiers */ "../node_modules/@theia/plugin-ext/lib/common/plugin-identifiers.js");
Object.defineProperty(exports, "PluginIdentifiers", ({ enumerable: true, get: function () { return plugin_identifiers_1.PluginIdentifiers; } }));
exports.hostedServicePath = '/services/hostedPlugin';
var PluginPackage;
(function (PluginPackage) {
    function toPluginUrl(pck, relativePath) {
        return `hostedPlugin/${getPluginId(pck)}/${encodeURIComponent(relativePath)}`;
    }
    PluginPackage.toPluginUrl = toPluginUrl;
})(PluginPackage || (exports.PluginPackage = PluginPackage = {}));
var CustomEditorPriority;
(function (CustomEditorPriority) {
    CustomEditorPriority["default"] = "default";
    CustomEditorPriority["builtin"] = "builtin";
    CustomEditorPriority["option"] = "option";
})(CustomEditorPriority || (exports.CustomEditorPriority = CustomEditorPriority = {}));
var PluginViewType;
(function (PluginViewType) {
    PluginViewType["Tree"] = "tree";
    PluginViewType["Webview"] = "webview";
})(PluginViewType || (exports.PluginViewType = PluginViewType = {}));
exports.PluginScanner = Symbol('PluginScanner');
/**
 * A plugin resolver is handling how to resolve a plugin link into a local resource.
 */
exports.PluginDeployerResolver = Symbol('PluginDeployerResolver');
exports.PluginDeployerDirectoryHandler = Symbol('PluginDeployerDirectoryHandler');
exports.PluginDeployerFileHandler = Symbol('PluginDeployerFileHandler');
exports.PluginDeployer = Symbol('PluginDeployer');
exports.PluginDeployerParticipant = Symbol('PluginDeployerParticipant');
var PluginDeployerEntryType;
(function (PluginDeployerEntryType) {
    PluginDeployerEntryType[PluginDeployerEntryType["FRONTEND"] = 0] = "FRONTEND";
    PluginDeployerEntryType[PluginDeployerEntryType["BACKEND"] = 1] = "BACKEND";
    PluginDeployerEntryType[PluginDeployerEntryType["HEADLESS"] = 2] = "HEADLESS"; // Deployed in the Theia Node server outside the context of a frontend/backend connection
})(PluginDeployerEntryType || (exports.PluginDeployerEntryType = PluginDeployerEntryType = {}));
/**
 * Whether a plugin installed by a user or system.
 */
var PluginType;
(function (PluginType) {
    PluginType[PluginType["System"] = 0] = "System";
    PluginType[PluginType["User"] = 1] = "User";
})(PluginType || (exports.PluginType = PluginType = {}));
;
var IconContribution;
(function (IconContribution) {
    function isIconDefinition(defaults) {
        return 'fontCharacter' in defaults;
    }
    IconContribution.isIconDefinition = isIconDefinition;
})(IconContribution || (exports.IconContribution = IconContribution = {}));
exports.MetadataProcessor = Symbol('MetadataProcessor');
function getPluginId(plugin) {
    return `${plugin.publisher}_${plugin.name}`.replace(/\W/g, '_');
}
exports.getPluginId = getPluginId;
function buildFrontendModuleName(plugin) {
    return `${plugin.publisher}_${plugin.name}`.replace(/\W/g, '_');
}
exports.buildFrontendModuleName = buildFrontendModuleName;
exports.HostedPluginClient = Symbol('HostedPluginClient');
exports.PluginDeployerHandler = Symbol('PluginDeployerHandler');
exports.HostedPluginServer = Symbol('HostedPluginServer');
exports.PLUGIN_HOST_BACKEND = 'main';
/**
 * The JSON-RPC workspace interface.
 */
exports.pluginServerJsonRpcPath = '/services/plugin-ext';
exports.PluginServer = Symbol('PluginServer');
exports.ServerPluginRunner = Symbol('ServerPluginRunner');
exports.PluginHostEnvironmentVariable = Symbol('PluginHostEnvironmentVariable');


/***/ })

};
;
//# sourceMappingURL=vendors-node_modules_theia_plugin-ext-vscode_lib_node_plugin-vscode-init_js.js.map